import 'dart:async';
import 'dart:collection';

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:vialticecmr/screen/TourneeScreen.dart';
import 'package:vialticecmr/utils/MyVariables.dart';

import 'package:vialticecmr/utils/blocks.dart';

import 'package:vialticecmr/utils/network.dart';

import '../utils/sqlHelper.dart';

class ExploitationScreen extends StatefulWidget {
  const ExploitationScreen({Key? key}) : super(key: key);

  @override
  _ExploitationScreenState createState() => _ExploitationScreenState();
}

class _ExploitationScreenState extends State<ExploitationScreen> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();

  Future<List<dynamic>> _fetchJobs() async {
    final response = Network().geOrdreTransport();

    return response;
  }

  Future<List<dynamic>> _fetchJobsOT() async {
    List params = [];
    params.add({'field': 'is_deleted', 'value': 0});
    params.add({
      'field': 'date_enlevement',
      'value': MyVariables().getDateFilter,
      'operator': '>'
    });
    var response = await SQLHelper.getItems(params, null);

    List responseReturn = [];
    List tournees = [];
    Map tourneesOt = {};

    int cpt = 0;
    for (var element in response) {
      var toAdd = Map.of(element);

      if (element['tournee_id'] != null) {
        Map<int, Widget> infoSuivi = {};
        Map dataTournee = {'infos_suivi': infoSuivi};

        dataTournee['infos_suivi'][element['sens_enl']] =
            getSuiviInfos(element['status'], 3.0);
        dataTournee['tournee_id'] = element['tournee_id'];
        dataTournee['code_tournee'] = element['code_tournee'];
        DateTime debut = DateTime.parse(element['debut_tournee'].toString());
        DateTime fin = DateTime.parse(element['debut_tournee'].toString())
            .add(Duration(days: element['nb_day'] - 1));

        var formatter = DateFormat('dd/MM/yyyy HH:mm');

        dataTournee['fin_tournee'] =
            formatter.format(fin).replaceAll(' 00:00', '');
        dataTournee['debut_tournee'] =
            formatter.format(debut).replaceAll(' 00:00', '');

        toAdd['tournee'] = dataTournee;

        if (!tournees.contains(element['tournee_id'])) {
          responseReturn.add(toAdd);
          tourneesOt[element['tournee_id']] = cpt;
          tournees.add(element['tournee_id']);
          cpt++;
        } else {
          responseReturn[tourneesOt[element['tournee_id']]]['tournee']
                  ['infos_suivi'][element['sens_enl']] =
              getSuiviInfos(element['status'], 3.0);
          var testMap = responseReturn[tourneesOt[element['tournee_id']]]
              ['tournee']['infos_suivi'];
          var sorted =
              SplayTreeMap<int, Widget>.from(testMap, (a, b) => a > b ? 1 : -1);
          testMap = sorted;
          responseReturn[tourneesOt[element['tournee_id']]]['tournee']
              ['infos_suivi'] = sorted;
        }
      } else {
        responseReturn.add(toAdd);
        cpt++;
      }
    }

    return responseReturn;
  }

  ListView _jobsListView(data, context) {
    return ListView.builder(
        itemCount: data.length,
        itemBuilder: (context, index) {
          return data[index]['tournee_id'] == null
              ? tile(data[index]['num_ot'], data[index]['ref_com'], Icons.work,
                  data[index], context)
              : _tileTournee(data[index]['tournee']);
        });
  }

  Material _tileTournee(tournee) => Material(
        type: MaterialType.canvas,
        color: Colors.white,
        elevation: 1.0,
        child: Container(
          padding: const EdgeInsets.all(5.0),
          child: Table(
              defaultVerticalAlignment: TableCellVerticalAlignment.top,
              columnWidths: const {
                0: FixedColumnWidth(30),
                1: FlexColumnWidth(1)
              },
              children: [
                TableRow(
                  children: [
                    Container(
                      alignment: Alignment.center,
                      width: 30.0,
                      height: 90.0,
                      child: Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: tournee['infos_suivi'].values.toList()),
                    ),
                    Column(
                      mainAxisAlignment: MainAxisAlignment.start,
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(tournee['code_tournee']),
                        ListTile(
                          title: Table(
                            children: [
                              TableRow(children: [
                                Container(
                                  padding: const EdgeInsets.all(5.0),
                                  child: iconBlock(
                                    Icons.calendar_month,
                                    tournee != null
                                        ? tournee['debut_tournee'].toString()
                                        : '',
                                    Colors.red,
                                  ),
                                ),
                                Container(
                                  padding: const EdgeInsets.all(5.0),
                                  child: iconBlock(
                                    Icons.calendar_month,
                                    tournee != null
                                        ? tournee['fin_tournee'].toString()
                                        : '',
                                    Colors.green,
                                  ),
                                ),
                              ]),
                            ],
                          ),
                          onTap: () => {
                            Navigator.pushNamed(
                              context,
                              '/tournee',
                              arguments: TourneeParams(
                                tournee['tournee_id'],
                              ),
                            )
                          },
                        )
                      ],
                    )
                  ],
                ),
              ]),
        ),
      );

  static Route<DateTime> _datePickerRoute(
    BuildContext context,
    Object? arguments,
  ) {
    return DialogRoute<DateTime>(
      context: context,
      builder: (BuildContext context) {
        return DatePickerDialog(
          restorationId: 'date_picker_dialog',
          initialEntryMode: DatePickerEntryMode.calendarOnly,
          initialDate: DateTime.fromMillisecondsSinceEpoch(arguments! as int),
          firstDate: DateTime(2021),
          lastDate: DateTime(2022),
        );
      },
    );
  }

  _showDialog(BuildContext context) async {
    var myVariables = MyVariables();
    //myVariables.setCurrentContext(context);
    DateTime initialDate;
    if (myVariables.getDateFilter != '') {
      initialDate = DateTime.parse(myVariables.getDateFilter);
    } else {
      initialDate = DateTime.now();
    }
    var date = await showDatePicker(
      context: context,
      locale: const Locale("fr", "FR"),
      initialDate: initialDate,
      firstDate: DateTime(2023),
      lastDate: DateTime(2050),
    );
    if (date != null) {
      myVariables.dateFilter(date.toString().substring(0, 10));
    } else {
      myVariables.dateFilter('');
    }
    Navigator.pushNamedAndRemoveUntil(
        context, '/home', ModalRoute.withName('/'));
  }

  @override
  void initState() {
    super.initState();
    //new Timer.periodic(Duration(seconds: 15), (Timer t) => setState(() {}));
  }

  @override
  Widget build(BuildContext context) {
    var myVariables = MyVariables();

    DateTime now = DateTime.now();
    var formatter = DateFormat('mm:ss');
    String formattedDate = formatter.format(now);

    myVariables.setCurrentContext(context);

    return Scaffold(
      appBar: AppBar(
        title:
            Row(mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [
          const Text('Ordres de transport '),
          ElevatedButton(
              onPressed: () {
                _showDialog(context);
              },
              child: Text(
                myVariables.getDateFilter == '' ||
                        myVariables.getDateFilter == 'null'
                    ? 'Tout'
                    : DateFormat('dd/MM/y').format(
                        DateTime.parse(myVariables.getDateFilter),
                      ),
              )),
        ]),
      ),
      body: FutureBuilder<List>(
        future: _fetchJobsOT(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            List? data = snapshot.data;

            return _jobsListView(data, context);
          } else if (snapshot.hasError) {
            return Text("${snapshot.error}");
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
      persistentFooterButtons: piedpageconnected(context),
    );
  }
}
